#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

using System;

public class Kendaraan 
{
    public string nama;
    public string merek;

    public Kendaraan(string nama, string merek)
    {
        this.nama = nama;
        this.merek = merek;
    }
}

public class Mobil : Kendaraan
{
    public int pintu ;

    public Mobil (string nama, string merek, int pintu) : base(nama, merek)
    {
        this.pintu = pintu ;
    }
    public void PrintInfo()
    {
        Console.WriteLine(nama);
    }
}

class Program 
{
    [STAThread]
    static void Main()
    {
        Mobil agya = new Mobil("Agya", "Toyota", 4);

        Console.WriteLine(agya.nama);
        
    }
}

#!csharp

using System;

public class Employee
{
    public int id;
    public string name;
    public int gaji;
}

public class Marketing : Employee
{
    public string divisi;

    // Tidak perlu memanggil konstruktor kelas induk karena tidak ada konstruktor yang didefinisikan di kelas Employee 
	// : Base(id, name, gaji)
    public Marketing(int id, string name, int gaji, string divisi)
    {
        this.id = id;
        this.name = name;
        this.gaji = gaji;
        this.divisi = divisi;
    }
}


public class Program
{
	public static void Main()
	{
		Marketing marketing = new Marketing(1, "Rizqi", 123, "Design");
		
		Console.WriteLine(marketing.name);
	}
}

#!csharp

// Overloading

class Calculator
{
    public int Add (int a, int b)
    {
        return a + b;
    }

    public double Add (int a, int b)
    {
        return a + b;
    }

}

#!csharp

// Polymorphsm
public class Animal 
{

    public int UmurKucing (int umur)
    {
        return umur;
    }

    public virtual void Makan ()
    {
        Console.WriteLine("Makanan Default");
    }
}

public class Cat:Animal
{

    public double UmurKucing (int umur)
    {
        return umur;
    }
    
    public override void Makan()
    {
        Console.WriteLine("Makan Ikan");
    }
}

class Program
{
    static void Main()
    {
        Cat Billy = new Cat();

        
        //Overloading
        // Dapat berubah sesuai dengan value dari parameter (5 / 5.5)
        Billy.UmurKucing(5);
        Console.WriteLine(Billy.UmurKucing);



        //Overriding
        Billy.Makan();

    }
}

#!markdown

Solusi Benar

#!csharp

using System;

public class Animal 
{

    public int UmurKucing(int umur)
    {
        return umur;
    }

    public virtual void Makan()
    {
        Console.WriteLine("Makanan Default");
    }
}

public class Cat : Animal
{

    public double UmurKucing(int umur)
    {
        return umur;
    }

    public override void Makan()
    {
        Console.WriteLine("Makan Ikan");
    }
}

class Program
{
    static void Main()
    {
        Cat Billy = new Cat();
        
        // Overloading
        int umur = 5;
        double hasilUmur = Billy.UmurKucing(umur);
        Console.WriteLine("Umur Billy: " + hasilUmur);
        
        // Overriding
        Billy.Makan();
    }
}
